name: Production

on:
  push:
    branches:
      - aws-deploy

env:
  APP_ENV: production

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout app-service code
        uses: actions/checkout@v3
        with:
          repository: delanoor/rusty-next
          token: ${{ secrets.GITHUB_TOKEN }}
          path: app-service

      - name: Create env file from secret
        run: echo "${{ secrets.ENV }}" > .env

      - name: Load .env
        run: |
          echo "Loading environment variables from .env file"
          set -o allexport
          source .env
          set +o allexport

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push app-service image to Amazon ECR
        id: build-app-service-image
        env:
          ECR_REPO: "${{ secrets.APP_NAME }}-${{ env.APP_ENV }}-repo"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app-service
          docker build --build-arg DATABASE_URL=$DATABASE_URL -t $ECR_REGISTRY/${{ env.ECR_REPO }}:app-service-$IMAGE_TAG -t $ECR_REGISTRY/${{ env.ECR_REPO }}:app-service-latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:app-service-$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:app-service-latest

      - name: Build, tag, and push auth-service image to Amazon ECR
        id: build-auth-service-image
        env:
          ECR_REPO: "${{ secrets.APP_NAME }}-${{ env.APP_ENV }}-repo"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd auth-service
          docker build \
            --build-arg DATABASE_URL=$DATABASE_URL \
            --build-arg JWT_SECRET=$JWT_SECRET \
            --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            --build-arg REDIS_HOST_NAME=$REDIS_HOST_NAME \
            --build-arg REDIS_PASSWORD=$REDIS_PASSWORD \
            --build-arg REDIS_PORT=$REDIS_PORT \
            -t $ECR_REGISTRY/${{ env.ECR_REPO }}:auth-service-$IMAGE_TAG \
            -t $ECR_REGISTRY/${{ env.ECR_REPO }}:auth-service-latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:auth-service-$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:auth-service-latest

      - name: Generate files
        env:
          TASK_CPU: 256
          TASK_MEMORY: 512
        run: |
          sed -i -e 's%<COMMIT>%'"${{ github.sha }}"'%' -e 's%<BRANCH>%'"${{ github.ref }}"'%' taskdef.json
          sed -i -e 's%<AWS_ACCOUNT_ID>%'"${{ secrets.AWS_ACCOUNT_ID }}"'%' taskdef.json
          sed -i -e 's%<AWS_REGION>%'"${{ secrets.AWS_REGION }}"'%' taskdef.json
          sed -i -e 's%<TASK_CPU>%'"${{ env.TASK_CPU }}"'%' taskdef.json
          sed -i -e 's%<TASK_MEMORY>%'"${{ env.TASK_MEMORY }}"'%' taskdef.json
          sed -i 's/<APP_NAME>/'${{ secrets.APP_NAME }}'/g' appspec.yml taskdef.json
          sed -i 's/<ENV>/'${{ env.APP_ENV }}'/g' appspec.yml taskdef.json
          sed -i 's/<SERVICE_PORT>/'${{ secrets.SERVICE_PORT }}'/g' appspec.yml taskdef.json

      - name: Generate artifact
        id: artifact
        run: zip -j artifact.zip appspec.yml taskdef.json

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --follow-symlinks --exclude '*' --include 'artifact.zip'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_S3_BUCKET: "${{ secrets.APP_NAME }}-${{ env.APP_ENV }}-codepipeline"
