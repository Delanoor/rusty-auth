name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - aws-deploy

env:
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  BASE_PATH: ${{ vars.BASE_PATH }}
  DOCKER_HUB_USERNAME: vinorelbine
  IMAGE_TAG: ${{ github.sha }}
  SQLX_OFFLINE: true

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout app-service code
        uses: actions/checkout@v3
        with:
          repository: delanoor/rusty-next
          token: ${{ secrets.GITHUB_TOKEN }}
          path: app-service

      - name: Create env file from secret
        run: echo "${{ secrets.ENV }}" > .env

      - name: Load .env
        run: |
          echo "Loading environment variables from .env file"
          set -o allexport
          source .env
          set +o allexport

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            app-service/.cargo
            app-service/target/
            auth-service/.cargo
            auth-service/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Build and test app-service code
        working-directory: ./app-service
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Build and test auth-service code
        working-directory: ./auth-service
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, tag, and push app-service image to Docker Hub
        id: build-app-service-image
        run: |
          cd app-service
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=http://auth-service:3000 \
            -t ${{ env.DOCKER_HUB_USERNAME }}/rusty-next:app-service-${{ env.IMAGE_TAG }} \
            -t ${{ env.DOCKER_HUB_USERNAME }}/rusty-next:app-service-latest .
          docker push ${{ env.DOCKER_HUB_USERNAME }}/rusty-next:app-service-${{ env.IMAGE_TAG }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/rusty-next:app-service-latest

      - name: Build, tag, and push auth-service image to Docker Hub
        id: build-auth-service-image
        run: |
          cd auth-service
          docker build \
            --build-arg DATABASE_URL=${{ env.DATABASE_URL }} \
            --build-arg JWT_SECRET=${{ env.JWT_SECRET }} \
            --build-arg SQLX_OFFLINE=${{ env.SQLX_OFFLINE }} \
            --build-arg POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            --build-arg REDIS_HOST_NAME=${{ env.REDIS_HOST_NAME }} \
            --build-arg REDIS_PASSWORD=${{ env.REDIS_PASSWORD }} \
            --build-arg REDIS_PORT=${{ env.REDIS_PORT }} \
            -t ${{ env.DOCKER_HUB_USERNAME }}/auth-service:auth-service-${{ env.IMAGE_TAG }} \
            -t ${{ env.DOCKER_HUB_USERNAME }}/auth-service:auth-service-latest .
          docker push ${{ env.DOCKER_HUB_USERNAME }}/auth-service:auth-service-${{ env.IMAGE_TAG }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/auth-service:auth-service-latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      BASE_PATH: ${{ vars.BASE_PATH }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Copy .env and compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            .env
            compose.yml
          target: "~/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~
            docker compose down
            docker compose pull
            docker compose up -d
