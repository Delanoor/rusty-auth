name: Build, Test, and Deploy to Prod

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  APP_ENV: production
  SQLX_OFFLINE: true
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: pass1234
  POSTGRES_DB: postgres

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.2-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432

      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-west-1"

      - name: Write config.toml
        run: echo "${{ secrets.CONFIG_TOML }}" | base64 --decode > auth-service/src/config/production.toml

      - name: Set environment variables
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "REDIS_HOST_NAME=${{ secrets.REDIS_HOST_NAME }}" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV

      - name: Cache dependencies for auth-service
        uses: actions/cache@v3
        with:
          path: |
            auth-service/.cargo
            auth-service/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('auth-service/**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust for auth-service
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Build and test auth-service code
        working-directory: ./auth-service
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_HOST_NAME: ${{ secrets.REDIS_HOST_NAME }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, tag, and push auth-service image to Docker Hub
        id: build-auth-service-image
        run: |
          cd auth-service
          docker build \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --build-arg SQLX_OFFLINE=${{ env.SQLX_OFFLINE }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg REDIS_HOST_NAME=${{ secrets.REDIS_HOST_NAME }} \
            --build-arg REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            --build-arg REDIS_PORT=${{ secrets.REDIS_PORT }} \
            -t ${{ secrets.DOCKER_USERNAME }}/rusty-auth:${{ github.sha }} \
            -t ${{ secrets.DOCKER_USERNAME }}/rusty-auth:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/rusty-auth:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/rusty-auth:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Copy compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            auth-service/compose.yml
          target: "~/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~
            docker compose down
            docker compose pull
            docker compose up -d
