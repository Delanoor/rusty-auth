name: Production

on:
  push:
    branches:
      - aws-deploy

env:
  APP_ENV: production

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout app-service code
        uses: actions/checkout@v3
        with:
          repository: delanoor/rusty-next
          token: ${{ secrets.PAT_TOKEN }}
          path: app-service

      - name: Create env file
        run: echo "${{ secrets.ENV }}" > .env

      - name: Load .env
        run: |
          echo "Loading environment variables from .env file"
          set -o allexport
          source .env
          set +o allexport

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push app-service image to Amazon ECR
        id: build-app-service-image
        env:
          ECR_REPO: "${{ secrets.APP_NAME }}-${{ env.APP_ENV }}-repo"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app-service
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ env.ECR_REPO }}:latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:latest

      - name: Build, tag, and push auth-service image to Amazon ECR
        id: build-auth-service-image
        env:
          ECR_REPO: "${{ secrets.APP_NAME }}-${{ env.APP_ENV }}-auth-service-repo"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd auth-service
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ env.ECR_REPO }}:latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:latest

      - name: Generate Terraform variables file
        run: |
          echo 'project_name = "rusty-auth"' > terraform.tfvars
          echo 'aws_region = "us-west-1"' >> terraform.tfvars
          echo 'certificate_arn = "arn:aws:acm:us-west-1:043152383660:certificate/7d1377f9-b40c-4688-afd2-717f8da99f54"' >> terraform.tfvars
          echo 'app_port = 3000' >> terraform.tfvars
          echo 'health_check_path = "/"' >> terraform.tfvars

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform configuration
        run: |
          set -o allexport
          source .env
          set +o allexport
          terraform apply -auto-approve

      - name: Output ECS Service URL
        run: terraform output
